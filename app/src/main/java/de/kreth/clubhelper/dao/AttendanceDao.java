package de.kreth.clubhelper.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.kreth.clubhelper.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTENDANCE.
*/
public class AttendanceDao extends AbstractDao<Attendance, Void> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OnDate = new Property(0, java.util.Date.class, "onDate", false, "ON_DATE");
        public final static Property PersonId = new Property(1, Long.class, "personId", false, "PERSON_ID");
    };

    private Query<Attendance> contact_AttendanceListQuery;

    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTENDANCE' (" + //
                "'ON_DATE' INTEGER," + // 0: onDate
                "'PERSON_ID' INTEGER);"); // 1: personId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTENDANCE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        java.util.Date onDate = entity.getOnDate();
        if (onDate != null) {
            stmt.bindLong(1, onDate.getTime());
        }
 
        Long personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindLong(2, personId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // onDate
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // personId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setOnDate(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setPersonId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Attendance entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Attendance entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attendanceList" to-many relationship of Contact. */
    public List<Attendance> _queryContact_AttendanceList(Long personId) {
        synchronized (this) {
            if (contact_AttendanceListQuery == null) {
                QueryBuilder<Attendance> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PersonId.eq(null));
                contact_AttendanceListQuery = queryBuilder.build();
            }
        }
        Query<Attendance> query = contact_AttendanceListQuery.forCurrentThread();
        query.setParameter(0, personId);
        return query.list();
    }

}
