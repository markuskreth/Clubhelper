package de.kreth.clubhelper.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.kreth.clubhelper.Relative;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RELATIVE.
*/
public class RelativeDao extends AbstractDao<Relative, Void> {

    public static final String TABLENAME = "RELATIVE";

    /**
     * Properties of entity Relative.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Person1 = new Property(0, long.class, "person1", true, "PERSON1");
        public final static Property Person2 = new Property(1, long.class, "person2", true, "PERSON2");
        public final static Property ToPerson2Relation = new Property(2, String.class, "toPerson2Relation", false, "TO_PERSON2_RELATION");
        public final static Property ToPerson1Relation = new Property(3, String.class, "toPerson1Relation", false, "TO_PERSON1_RELATION");
    };

    private DaoSession daoSession;

    private Query<Relative> person_RelativeListQuery;

    public RelativeDao(DaoConfig config) {
        super(config);
    }
    
    public RelativeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RELATIVE' (" + //
                "'PERSON1' INTEGER PRIMARY KEY NOT NULL ," + // 0: person1
                "'PERSON2' INTEGER PRIMARY KEY NOT NULL ," + // 1: person2
                "'TO_PERSON2_RELATION' TEXT," + // 2: toPerson2Relation
                "'TO_PERSON1_RELATION' TEXT);"); // 3: toPerson1Relation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RELATIVE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Relative entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPerson1());
        stmt.bindLong(2, entity.getPerson2());
 
        String toPerson2Relation = entity.getToPerson2Relation();
        if (toPerson2Relation != null) {
            stmt.bindString(3, toPerson2Relation);
        }
 
        String toPerson1Relation = entity.getToPerson1Relation();
        if (toPerson1Relation != null) {
            stmt.bindString(4, toPerson1Relation);
        }
    }

    @Override
    protected void attachEntity(Relative entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Relative readEntity(Cursor cursor, int offset) {
        Relative entity = new Relative( //
            cursor.getLong(offset + 0), // person1
            cursor.getLong(offset + 1), // person2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toPerson2Relation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // toPerson1Relation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Relative entity, int offset) {
        entity.setPerson1(cursor.getLong(offset + 0));
        entity.setPerson2(cursor.getLong(offset + 1));
        entity.setToPerson2Relation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToPerson1Relation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Relative entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Relative entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "relativeList" to-many relationship of Person. */
    public List<Relative> _queryPerson_RelativeList(long person1) {
        synchronized (this) {
            if (person_RelativeListQuery == null) {
                QueryBuilder<Relative> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Person1.eq(null));
                person_RelativeListQuery = queryBuilder.build();
            }
        }
        Query<Relative> query = person_RelativeListQuery.forCurrentThread();
        query.setParameter(0, person1);
        return query.list();
    }

}
