package de.kreth.clubhelper.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.kreth.clubhelper.Synchronization;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYNCHRONIZATION".
*/
public class SynchronizationDao extends AbstractDao<Synchronization, Long> {

    public static final String TABLENAME = "SYNCHRONIZATION";

    /**
     * Properties of entity Synchronization.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Table_name = new Property(1, String.class, "table_name", false, "TABLE_NAME");
        public final static Property Upload_successful = new Property(2, java.util.Date.class, "upload_successful", false, "UPLOAD_SUCCESSFUL");
        public final static Property Download_successful = new Property(3, java.util.Date.class, "download_successful", false, "DOWNLOAD_SUCCESSFUL");
    };


    public SynchronizationDao(DaoConfig config) {
        super(config);
    }
    
    public SynchronizationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYNCHRONIZATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TABLE_NAME\" TEXT," + // 1: table_name
                "\"UPLOAD_SUCCESSFUL\" INTEGER," + // 2: upload_successful
                "\"DOWNLOAD_SUCCESSFUL\" INTEGER);"); // 3: download_successful
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYNCHRONIZATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Synchronization entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String table_name = entity.getTable_name();
        if (table_name != null) {
            stmt.bindString(2, table_name);
        }
 
        java.util.Date upload_successful = entity.getUpload_successful();
        if (upload_successful != null) {
            stmt.bindLong(3, upload_successful.getTime());
        }
 
        java.util.Date download_successful = entity.getDownload_successful();
        if (download_successful != null) {
            stmt.bindLong(4, download_successful.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Synchronization readEntity(Cursor cursor, int offset) {
        Synchronization entity = new Synchronization( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // table_name
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // upload_successful
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // download_successful
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Synchronization entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTable_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpload_successful(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDownload_successful(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Synchronization entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Synchronization entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
