package de.kreth.clubhelper;

import java.util.List;
import de.kreth.clubhelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import de.kreth.clubhelper.dao.PersonDao;
import de.kreth.clubhelper.dao.RelativeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RELATIVE.
 */
public class Relative {

    private long person1;
    private long person2;
    private String toPerson2Relation;
    private String toPerson1Relation;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RelativeDao myDao;

    private List<Person> personList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Relative() {
    }

    public Relative(long person1, long person2) {
        this.person1 = person1;
        this.person2 = person2;
    }

    public Relative(long person1, long person2, String toPerson2Relation, String toPerson1Relation) {
        this.person1 = person1;
        this.person2 = person2;
        this.toPerson2Relation = toPerson2Relation;
        this.toPerson1Relation = toPerson1Relation;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRelativeDao() : null;
    }

    public long getPerson1() {
        return person1;
    }

    public void setPerson1(long person1) {
        this.person1 = person1;
    }

    public long getPerson2() {
        return person2;
    }

    public void setPerson2(long person2) {
        this.person2 = person2;
    }

    public String getToPerson2Relation() {
        return toPerson2Relation;
    }

    public void setToPerson2Relation(String toPerson2Relation) {
        this.toPerson2Relation = toPerson2Relation;
    }

    public String getToPerson1Relation() {
        return toPerson1Relation;
    }

    public void setToPerson1Relation(String toPerson1Relation) {
        this.toPerson1Relation = toPerson1Relation;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Person> getPersonList() {
        if (personList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            List<Person> personListNew = targetDao._queryRelative_PersonList(person2);
            synchronized (this) {
                if(personList == null) {
                    personList = personListNew;
                }
            }
        }
        return personList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPersonList() {
        personList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
