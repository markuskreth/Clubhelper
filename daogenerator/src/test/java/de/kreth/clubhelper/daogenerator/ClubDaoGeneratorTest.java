package de.kreth.clubhelper.daogenerator;

import org.junit.Before;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

/**
 * Created by markus on 17.07.16.
 */
public class ClubDaoGeneratorTest {

    private ClubDaoGenerator generator;

    @Before
    public void setup() {
        generator = new ClubDaoGenerator();
    }

    @org.junit.Test
    public void testFilterLines() throws Exception {
        List<String> lines = new ArrayList<>(Arrays.asList(getPersonSource().split("\n")));

        List<String> filtered = generator.filterLines(lines);

        assertEquals("package de.kreth.clubhelper;", filtered.get(0));

        assertEquals(" * Entity mapped to table \"PERSON\".", filtered.get(3));
        assertEquals("public class Person implements Data {", filtered.get(5));

        assertEquals("    public Person() {", filtered.get(15));
        assertEquals("    }", filtered.get(16));

        assertEquals("    public Person(Long id) {", filtered.get(18));
        assertEquals("    }", filtered.get(20));

        assertEquals("    public Person(Long id, String prename, String surname, String type, java.util.Date birth, java.util.Date changed, java.util.Date created, SyncStatus syncStatus) {", filtered.get(22));
        assertEquals("    }", filtered.get(31));

        assertEquals("    public class RelativeType {", filtered.get(159));
        assertEquals("    }", filtered.get(173));

        assertEquals("}", filtered.get(175));

        lines = new ArrayList<>(Arrays.asList(getAdressSource().split("\n")));
        filtered = generator.filterLines(lines);

        assertEquals("package de.kreth.clubhelper;", filtered.get(0));

        assertEquals(" * Entity mapped to table \"ADRESS\".", filtered.get(3));
        assertEquals("public class Adress implements Data {", filtered.get(5));

        assertEquals("    public Adress() {", filtered.get(17));
        assertEquals("    }", filtered.get(18));

        assertEquals("    public Adress(Long id) {", filtered.get(20));
        assertEquals("    }", filtered.get(22));

        assertEquals(164, filtered.size());
    }

    private String getAdressSource() {
        return "package de.kreth.clubhelper;\n" +
                "\n" +
                "// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE \"KEEP\"-SECTIONS\n" +
                "\n" +
                "// KEEP INCLUDES - put your custom includes here\n" +
                "// KEEP INCLUDES END\n" +
                "/**\n" +
                " * Entity mapped to table \"ADRESS\".\n" +
                " */\n" +
                "public class Adress implements Data {\n" +
                "\n" +
                "    private Long id;\n" +
                "    private String adress1;\n" +
                "    private String adress2;\n" +
                "    private String plz;\n" +
                "    private String city;\n" +
                "    private long personId;\n" +
                "    /** Not-null value. */\n" +
                "    private java.util.Date changed;\n" +
                "    /** Not-null value. */\n" +
                "    private java.util.Date created;\n" +
                "    private SyncStatus syncStatus;\n" +
                "\n" +
                "    // KEEP FIELDS - put your custom fields here\n" +
                "    // KEEP FIELDS END\n" +
                "\n" +
                "    public Adress() {\n" +
                "    }\n" +
                "\n" +
                "    public Adress(Long id) {\n" +
                "        this.id = id;\n" +
                "    }\n" +
                "\n" +
                "    public Adress(Long id, String adress1, String adress2, String plz, String city, long personId, java.util.Date changed, java.util.Date created, SyncStatus syncStatus) {\n" +
                "        this.id = id;\n" +
                "        this.adress1 = adress1;\n" +
                "        this.adress2 = adress2;\n" +
                "        this.plz = plz;\n" +
                "        this.city = city;\n" +
                "        this.personId = personId;\n" +
                "        this.changed = changed;\n" +
                "        this.created = created;\n" +
                "        this.syncStatus = syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    public Long getId() {\n" +
                "        return id;\n" +
                "    }\n" +
                "\n" +
                "    public void setId(Long id) {\n" +
                "        this.id = id;\n" +
                "    }\n" +
                "\n" +
                "    public String getAdress1() {\n" +
                "        return adress1;\n" +
                "    }\n" +
                "\n" +
                "    public void setAdress1(String adress1) {\n" +
                "        this.adress1 = adress1;\n" +
                "    }\n" +
                "\n" +
                "    public String getAdress2() {\n" +
                "        return adress2;\n" +
                "    }\n" +
                "\n" +
                "    public void setAdress2(String adress2) {\n" +
                "        this.adress2 = adress2;\n" +
                "    }\n" +
                "\n" +
                "    public String getPlz() {\n" +
                "        return plz;\n" +
                "    }\n" +
                "\n" +
                "    public void setPlz(String plz) {\n" +
                "        this.plz = plz;\n" +
                "    }\n" +
                "\n" +
                "    public String getCity() {\n" +
                "        return city;\n" +
                "    }\n" +
                "\n" +
                "    public void setCity(String city) {\n" +
                "        this.city = city;\n" +
                "    }\n" +
                "\n" +
                "    public long getPersonId() {\n" +
                "        return personId;\n" +
                "    }\n" +
                "\n" +
                "    public void setPersonId(long personId) {\n" +
                "        this.personId = personId;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value. */\n" +
                "    public java.util.Date getChanged() {\n" +
                "        return changed;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value; ensure this value is available before it is saved to the database. */\n" +
                "    public void setChanged(java.util.Date changed) {\n" +
                "        this.changed = changed;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value. */\n" +
                "    public java.util.Date getCreated() {\n" +
                "        return created;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value; ensure this value is available before it is saved to the database. */\n" +
                "    public void setCreated(java.util.Date created) {\n" +
                "        this.created = created;\n" +
                "    }\n" +
                "\n" +
                "    public SyncStatus getSyncStatus() {\n" +
                "        return syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    public void setSyncStatus(SyncStatus syncStatus) {\n" +
                "        this.syncStatus = syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    // KEEP METHODS - put your custom methods here\n" +
                "\n" +
                "    @Override\n" +
                "    public String toString() {\n" +
                "        StringBuilder bld = new StringBuilder();\n" +
                "        if(adress1 != null)\n" +
                "            bld.append(adress1);\n" +
                "        if(adress2 != null && adress2.trim().length() >0) {\n" +
                "            if(bld.length()>0)\n" +
                "                bld.append(\"\\n\");\n" +
                "            bld.append(adress2);\n" +
                "        }\n" +
                "\n" +
                "        if(plz != null && plz.length()>0 && city != null && city.length()>0) {\n" +
                "\n" +
                "            if(bld.length()>0)\n" +
                "                bld.append(\"\\n\");\n" +
                "            bld.append(plz).append(\" \").append(city);\n" +
                "        }\n" +
                "\n" +
                "        return bld.toString();\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    public boolean equals(Object o) {\n" +
                "        if (this == o) return true;\n" +
                "        if (o == null || getClass() != o.getClass()) return false;\n" +
                "\n" +
                "        Adress adress = (Adress) o;\n" +
                "\n" +
                "        if (personId != adress.personId) return false;\n" +
                "        if (id != null ? !id.equals(adress.id) : adress.id != null) return false;\n" +
                "        if (adress1 != null ? !adress1.equals(adress.adress1) : adress.adress1 != null)\n" +
                "            return false;\n" +
                "        if (adress2 != null ? !adress2.equals(adress.adress2) : adress.adress2 != null)\n" +
                "            return false;\n" +
                "        if (plz != null ? !plz.equals(adress.plz) : adress.plz != null) return false;\n" +
                "        if (city != null ? !city.equals(adress.city) : adress.city != null) return false;\n" +
                "        if (changed != null ? !changed.equals(adress.changed) : adress.changed != null)\n" +
                "            return false;\n" +
                "        return !(created != null ? !created.equals(adress.created) : adress.created != null);\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    public int hashCode() {\n" +
                "        int result = id != null ? id.hashCode() : 0;\n" +
                "        result = 31 * result + (adress1 != null ? adress1.hashCode() : 0);\n" +
                "        result = 31 * result + (adress2 != null ? adress2.hashCode() : 0);\n" +
                "        result = 31 * result + (plz != null ? plz.hashCode() : 0);\n" +
                "        result = 31 * result + (city != null ? city.hashCode() : 0);\n" +
                "        result = 31 * result + (int) (personId ^ (personId >>> 32));\n" +
                "        result = 31 * result + (changed != null ? changed.hashCode() : 0);\n" +
                "        result = 31 * result + (created != null ? created.hashCode() : 0);\n" +
                "        return result;\n" +
                "    }\n" +
                "    // KEEP METHODS END\n" +
                "\n" +
                "}\n";
    }

    private String getPersonSource() {
        return "package de.kreth.clubhelper;\n" +
                "\n" +
                "import java.util.List;\n" +
                "import de.kreth.clubhelper.dao.DaoSession;\n" +
                "import de.greenrobot.dao.DaoException;\n" +
                "\n" +
                "import de.kreth.clubhelper.dao.AdressDao;\n" +
                "import de.kreth.clubhelper.dao.AttendanceDao;\n" +
                "import de.kreth.clubhelper.dao.ContactDao;\n" +
                "import de.kreth.clubhelper.dao.PersonDao;\n" +
                "import de.kreth.clubhelper.dao.PersonGroupDao;\n" +
                "\n" +
                "// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE \"KEEP\"-SECTIONS\n" +
                "\n" +
                "// KEEP INCLUDES - put your custom includes here\n" +
                "import android.database.Cursor;\n" +
                "import android.database.sqlite.SQLiteDatabase;\n" +
                "import java.util.ArrayList;\n" +
                "import de.greenrobot.dao.AbstractDao;\n" +
                "// KEEP INCLUDES END\n" +
                "/**\n" +
                " * Entity mapped to table \"PERSON\".\n" +
                " */\n" +
                "public class Person implements Data {\n" +
                "\n" +
                "    private Long id;\n" +
                "    private String prename;\n" +
                "    private String surname;\n" +
                "    private String type;\n" +
                "    private java.util.Date birth;\n" +
                "    /** Not-null value. */\n" +
                "    private java.util.Date changed;\n" +
                "    /** Not-null value. */\n" +
                "    private java.util.Date created;\n" +
                "    private SyncStatus syncStatus;\n" +
                "\n" +
                "    /** Used to resolve relations */\n" +
                "    private transient DaoSession daoSession;\n" +
                "\n" +
                "    /** Used for active entity operations. */\n" +
                "    private transient PersonDao myDao;\n" +
                "\n" +
                "    private List<Contact> contactList;\n" +
                "    private List<Attendance> attendanceList;\n" +
                "    private List<Adress> adressList;\n" +
                "    private List<PersonGroup> personGroupList;\n" +
                "\n" +
                "    // KEEP FIELDS - put your custom fields here\n" +
                "    // KEEP FIELDS END\n" +
                "\n" +
                "    public Person() {\n" +
                "    }\n" +
                "\n" +
                "    public Person(Long id) {\n" +
                "        this.id = id;\n" +
                "    }\n" +
                "\n" +
                "    public Person(Long id, String prename, String surname, String type, java.util.Date birth, java.util.Date changed, java.util.Date created, SyncStatus syncStatus) {\n" +
                "        this.id = id;\n" +
                "        this.prename = prename;\n" +
                "        this.surname = surname;\n" +
                "        this.type = type;\n" +
                "        this.birth = birth;\n" +
                "        this.changed = changed;\n" +
                "        this.created = created;\n" +
                "        this.syncStatus = syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    /** called by internal mechanisms, do not call yourself. */\n" +
                "    public void __setDaoSession(DaoSession daoSession) {\n" +
                "        this.daoSession = daoSession;\n" +
                "        myDao = daoSession != null ? daoSession.getPersonDao() : null;\n" +
                "    }\n" +
                "\n" +
                "    public Long getId() {\n" +
                "        return id;\n" +
                "    }\n" +
                "\n" +
                "    public void setId(Long id) {\n" +
                "        this.id = id;\n" +
                "    }\n" +
                "\n" +
                "    public String getPrename() {\n" +
                "        return prename;\n" +
                "    }\n" +
                "\n" +
                "    public void setPrename(String prename) {\n" +
                "        this.prename = prename;\n" +
                "    }\n" +
                "\n" +
                "    public String getSurname() {\n" +
                "        return surname;\n" +
                "    }\n" +
                "\n" +
                "    public void setSurname(String surname) {\n" +
                "        this.surname = surname;\n" +
                "    }\n" +
                "\n" +
                "    public String getType() {\n" +
                "        return type;\n" +
                "    }\n" +
                "\n" +
                "    public void setType(String type) {\n" +
                "        this.type = type;\n" +
                "    }\n" +
                "\n" +
                "    public java.util.Date getBirth() {\n" +
                "        return birth;\n" +
                "    }\n" +
                "\n" +
                "    public void setBirth(java.util.Date birth) {\n" +
                "        this.birth = birth;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value. */\n" +
                "    public java.util.Date getChanged() {\n" +
                "        return changed;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value; ensure this value is available before it is saved to the database. */\n" +
                "    public void setChanged(java.util.Date changed) {\n" +
                "        this.changed = changed;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value. */\n" +
                "    public java.util.Date getCreated() {\n" +
                "        return created;\n" +
                "    }\n" +
                "\n" +
                "    /** Not-null value; ensure this value is available before it is saved to the database. */\n" +
                "    public void setCreated(java.util.Date created) {\n" +
                "        this.created = created;\n" +
                "    }\n" +
                "\n" +
                "    public SyncStatus getSyncStatus() {\n" +
                "        return syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    public void setSyncStatus(SyncStatus syncStatus) {\n" +
                "        this.syncStatus = syncStatus;\n" +
                "    }\n" +
                "\n" +
                "    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */\n" +
                "    public List<Contact> getContactList() {\n" +
                "        if (contactList == null) {\n" +
                "            if (daoSession == null) {\n" +
                "                throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "            }\n" +
                "            ContactDao targetDao = daoSession.getContactDao();\n" +
                "            List<Contact> contactListNew = targetDao._queryPerson_ContactList(id);\n" +
                "            synchronized (this) {\n" +
                "                if(contactList == null) {\n" +
                "                    contactList = contactListNew;\n" +
                "                }\n" +
                "            }\n" +
                "        }\n" +
                "        return contactList;\n" +
                "    }\n" +
                "\n" +
                "    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n" +
                "    public synchronized void resetContactList() {\n" +
                "        contactList = null;\n" +
                "    }\n" +
                "\n" +
                "    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */\n" +
                "    public List<Attendance> getAttendanceList() {\n" +
                "        if (attendanceList == null) {\n" +
                "            if (daoSession == null) {\n" +
                "                throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "            }\n" +
                "            AttendanceDao targetDao = daoSession.getAttendanceDao();\n" +
                "            List<Attendance> attendanceListNew = targetDao._queryPerson_AttendanceList(id);\n" +
                "            synchronized (this) {\n" +
                "                if(attendanceList == null) {\n" +
                "                    attendanceList = attendanceListNew;\n" +
                "                }\n" +
                "            }\n" +
                "        }\n" +
                "        return attendanceList;\n" +
                "    }\n" +
                "\n" +
                "    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n" +
                "    public synchronized void resetAttendanceList() {\n" +
                "        attendanceList = null;\n" +
                "    }\n" +
                "\n" +
                "    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */\n" +
                "    public List<Adress> getAdressList() {\n" +
                "        if (adressList == null) {\n" +
                "            if (daoSession == null) {\n" +
                "                throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "            }\n" +
                "            AdressDao targetDao = daoSession.getAdressDao();\n" +
                "            List<Adress> adressListNew = targetDao._queryPerson_AdressList(id);\n" +
                "            synchronized (this) {\n" +
                "                if(adressList == null) {\n" +
                "                    adressList = adressListNew;\n" +
                "                }\n" +
                "            }\n" +
                "        }\n" +
                "        return adressList;\n" +
                "    }\n" +
                "\n" +
                "    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n" +
                "    public synchronized void resetAdressList() {\n" +
                "        adressList = null;\n" +
                "    }\n" +
                "\n" +
                "    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */\n" +
                "    public List<PersonGroup> getPersonGroupList() {\n" +
                "        if (personGroupList == null) {\n" +
                "            if (daoSession == null) {\n" +
                "                throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "            }\n" +
                "            PersonGroupDao targetDao = daoSession.getPersonGroupDao();\n" +
                "            List<PersonGroup> personGroupListNew = targetDao._queryPerson_PersonGroupList(id);\n" +
                "            synchronized (this) {\n" +
                "                if(personGroupList == null) {\n" +
                "                    personGroupList = personGroupListNew;\n" +
                "                }\n" +
                "            }\n" +
                "        }\n" +
                "        return personGroupList;\n" +
                "    }\n" +
                "\n" +
                "    /** Resets a to-many relationship, making the next get call to query for a fresh result. */\n" +
                "    public synchronized void resetPersonGroupList() {\n" +
                "        personGroupList = null;\n" +
                "    }\n" +
                "\n" +
                "    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */\n" +
                "    public void delete() {\n" +
                "        if (myDao == null) {\n" +
                "            throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "        }    \n" +
                "        myDao.delete(this);\n" +
                "    }\n" +
                "\n" +
                "    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */\n" +
                "    public void update() {\n" +
                "        if (myDao == null) {\n" +
                "            throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "        }    \n" +
                "        myDao.update(this);\n" +
                "    }\n" +
                "\n" +
                "    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */\n" +
                "    public void refresh() {\n" +
                "        if (myDao == null) {\n" +
                "            throw new DaoException(\"Entity is detached from DAO context\");\n" +
                "        }    \n" +
                "        myDao.refresh(this);\n" +
                "    }\n" +
                "\n" +
                "    // KEEP METHODS - put your custom methods here\n" +
                "\n" +
                "    @Override\n" +
                "    public Object clone() throws CloneNotSupportedException {\n" +
                "        Person clone = (Person) super.clone();\n" +
                "        return clone;\n" +
                "    }\n" +
                "\n" +
                "    public List<Group> getGroups() {\n" +
                "        List<Group> result = new ArrayList<>();\n" +
                "        final List<PersonGroup> personGroupList = getPersonGroupList();\n" +
                "        for (PersonGroup pg :\n" +
                "                getPersonGroupList()) {\n" +
                "            result.addAll(pg.getGroupList());\n" +
                "        }\n" +
                "        return result;\n" +
                "    }\n" +
                "\n" +
                "    public PersonType getPersonType() {\n" +
                "        try {\n" +
                "            return PersonType.valueOf(this.type);\n" +
                "        } catch (Exception e) {\n" +
                "            if(this.type == null || this.type.startsWith(\"AC\")) {\n" +
                "                this.setType(PersonType.ACTIVE.name());\n" +
                "                this.update();\n" +
                "                return PersonType.ACTIVE;\n" +
                "            }\n" +
                "            else\n" +
                "                throw e;\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    public void setPersonType(PersonType type) {\n" +
                "        setType(type.name());\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    public String toString() {\n" +
                "        return id + \": \" + prename + \" \" + surname;\n" +
                "    }\n" +
                "\n" +
                "    public List<RelativeType> getRelations() {\n" +
                "        SQLiteDatabase db = daoSession.getDatabase();\n" +
                "\n" +
                "        String sql = \"select RELATIVE.PERSON1 as PersonID, RELATIVE.TO_PERSON1_RELATION from RELATIVE WHERE RELATIVE.PERSON2=\" + id +\n" +
                "                \" UNION \\n\" +\n" +
                "                \"select RELATIVE.PERSON2 AS PersonID, RELATIVE.TO_PERSON2_RELATION from RELATIVE WHERE RELATIVE.PERSON1=\" + id;\n" +
                "        Cursor cursor = db.rawQuery(\n" +
                "                sql,\n" +
                "                null);\n" +
                "\n" +
                "        List<RelativeType> result = new ArrayList<>();\n" +
                "        while (cursor.moveToNext()) {\n" +
                "            long relId = cursor.getLong(0);\n" +
                "            RelativeType t = new RelativeType();\n" +
                "            t.rel = myDao.load(relId);\n" +
                "            t.type = RelationType.valueOf(cursor.getString(1));\n" +
                "            result.add(t);\n" +
                "        }\n" +
                "        cursor.close();\n" +
                "\n" +
                "        return result;\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    public boolean equals(Object o) {\n" +
                "        if (this == o) return true;\n" +
                "        if (o == null || getClass() != o.getClass()) return false;\n" +
                "\n" +
                "        Person person = (Person) o;\n" +
                "\n" +
                "        if (id != null ? !id.equals(person.id) : person.id != null) return false;\n" +
                "        if (prename != null ? !prename.equals(person.prename) : person.prename != null)\n" +
                "            return false;\n" +
                "        if (surname != null ? !surname.equals(person.surname) : person.surname != null)\n" +
                "            return false;\n" +
                "        if (type != null ? !type.equals(person.type) : person.type != null) return false;\n" +
                "        if (birth != null ? !birth.equals(person.birth) : person.birth != null) return false;\n" +
                "        if (changed != null ? !changed.equals(person.changed) : person.changed != null)\n" +
                "            return false;\n" +
                "        return !(created != null ? !created.equals(person.created) : person.created != null);\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    public int hashCode() {\n" +
                "        int result = id != null ? id.hashCode() : 0;\n" +
                "        result = 31 * result + (prename != null ? prename.hashCode() : 0);\n" +
                "        result = 31 * result + (surname != null ? surname.hashCode() : 0);\n" +
                "        result = 31 * result + (type != null ? type.hashCode() : 0);\n" +
                "        result = 31 * result + (birth != null ? birth.hashCode() : 0);\n" +
                "        result = 31 * result + (changed != null ? changed.hashCode() : 0);\n" +
                "        result = 31 * result + (created != null ? created.hashCode() : 0);\n" +
                "        return result;\n" +
                "    }\n" +
                "\n" +
                "    public class RelativeType {\n" +
                "        private RelationType type;\n" +
                "        private Person rel;\n" +
                "\n" +
                "        private RelativeType() {\n" +
                "        }\n" +
                "\n" +
                "        public Person getRel() {\n" +
                "            return rel;\n" +
                "        }\n" +
                "\n" +
                "        public RelationType getType() {\n" +
                "            return type;\n" +
                "        }\n" +
                "    }\n" +
                "    // KEEP METHODS END\n" +
                "\n" +
                "}\n";
    }
}